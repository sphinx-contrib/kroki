[tool.poetry]
name = "sphinxcontrib-kroki"
version = "1.3.0"
description = "Kroki integration into sphinx"
license = "MIT"
authors = ["Martin Haso≈à <martin.hason@gmail.com>"]
readme = "README.md"
repository = "https://github.com/sphinx-contrib/kroki"
classifiers = [
    "Framework :: Sphinx :: Extension",
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
]
packages = [
  { include = "sphinxcontrib", from = "src" }
]

[tool.poetry.dependencies]
python = "^3.8.1"
sphinx = "^6"
requests = "^2.4.2"
pyyaml = "^6.0.1"

[tool.poetry.group.dev.dependencies]
mypy = "^1.6.1"
pytest = "^7.4.3"
pytest-cov = "^4.1.0"
pre-commit = "^3.5.0"
types-requests = "^2.31.0.10"
types-pyyaml = "^6.0.12.12"
types-setuptools = "^68.2.0.0"
types-docutils = "^0.20.0.3"


[tool.mypy]
strict = true
show_error_codes = true
files = "src,tests"
no_implicit_reexport = true


[tool.pytest.ini_options]
markers = [
    "sphinx: run test in sphinx project",
]


[tool.ruff]
target-version = "py38"
select = [
    "A",      # flake8-builtins
#    "ANN",    # flake8-annotations
#    "ARG",    # flake8-unused-arguments
    "ASYNC",  # flake8-async
    "B",      # flake8-bugbear
    "BLE",    # flake8-blind-except
    "C4",     # flake8-comprehensions
#    "C90",    # cognitive complexity
    "COM",    # flake8-commas
#    "D",      # pydocstyle
    "DTZ",    # flake8-datetimez
    "E",      # flake8 built-ins
    "EM",     # flake8-errmsg
    "ERA",    # flake8-eradicate
    "F",      # flake8 built-ins
    "FA",     # flake8-future-annotations
#    "FBT",    # boolean trap
    "FURB",   # refurb
    "G",      # flake8-logging-format
    "I",      # isort
    "ICN",    # flake8-import-conventions
    "ISC",    # implicit-str-concat
    "N",      # pep8-naming
    "PERF",    # perflint
    "PGH",    # pygrep-hooks
    "PIE",    # flake8-pie
    "PLC",    # pylint
    "PLE",    # pylint
#    "PLR",    # pylint
    "PLW",    # pylint
    "PT",     # flake8-pytest-style
    "PTH",    # flake8-use-pathlib
    "PYI",    # flake8-pyi
    "Q",      # flake8-quotes
    "RET",    # flake8-return
    "RSE",    # flake8-raise
    "RUF",    # Ruff-specific lints
#    "S",      # flake8-bandit
    "SIM",    # flake8-simplify
#    "SLF",    # flake8-self
#    "T20",    # flake8-print
    "TID252", # ban relative imports
    "UP",     # pyupgrade
    "W",      # flake8 built-ins
#    "TRY",    # tryceratops
    "YTT",    # flake8-2020
]
ignore = [
    "ANN101", # Missing type annotation for `self` in method
]

[tool.ruff.per-file-ignores]
"tests/*" = ["S101"]


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
